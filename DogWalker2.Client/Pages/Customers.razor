@page "/customers"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@rendermode InteractiveWebAssembly


<PageTitle>Customers</PageTitle>


<h1>Customers</h1>

<p>This component demonstrates fetching customer data from the server.</p>

@if (response.customers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <HxButton Size="ButtonSize.Regular" Color="ThemeColor.Primary" OnClick="() => setRegisterCustomer()">Add Customer</HxButton>
    <HxButton Size="ButtonSize.Regular" Icon="BootstrapIcon.Trash" OnClick="() => handleDeleteClick(selected_customer)">Delete</HxButton>

    @if (registerCustomer)
    {


        <PostCustomer />
    }
    else
    {
        <HxGrid @ref="customerGrid" TItem="Customer" DataProvider="GetCustomerGrid" Responsive="true" SelectionEnabled="true" @bind-SelectedDataItem="selected_customer" >
            
            <Columns>
                <HxGridColumn HeaderText="First Name" ItemTextSelector="customer => customer.first_name" />
                <HxGridColumn HeaderText="Last Name" ItemTextSelector="customer => customer.last_name" />
                <HxGridColumn HeaderText="Address" ItemTextSelector="customer => customer.address" />
                <HxGridColumn HeaderText="City" ItemTextSelector="customer => customer.city" />
                <HxGridColumn HeaderText="State" ItemTextSelector="customer => customer.state" />
                <HxGridColumn HeaderText="Zip" ItemTextSelector="customer => customer.zipcode" />
                
                    <HxContextMenuGridColumn Context="item">
                    @if(item.dogs.Count > 0)
                    {
     
                    <HxContextMenu>
                        @foreach(var dog in item.dogs)
                        {
                            
                        
                        <HxContextMenuItem Text="@dog.name" Icon="BootstrapIcon.Android"></HxContextMenuItem>
                        }
                </HxContextMenu>
                    }
                </HxContextMenuGridColumn>
              
            </Columns>
        </HxGrid>
@* 
        <table class="table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Address</th>
                    <th>Dogs</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var customer in response.customers)
                {
                    <tr>
                        <td>@customer.first_name</td>
                        <td>@customer.last_name</td>
                        <td>@customer.address, @customer.city, @customer.state, @customer.zipcode</td>
                        @if (customer.dogs is not null && customer.dogs.Count > 0)
                        {
                            <HxContextMenu>
                                @foreach (var dog in customer.dogs)
                                {
                                    <HxContextMenuItem>@dog.name</HxContextMenuItem>
                                }


                            </HxContextMenu>
                        }
                        <button class="btn btn-primary active" @onclick="() => isPressed(customer.id)">Edit</button>


                    </tr>
                }

            </tbody>
        </table> *@
        if (editButton && customerToEdit is not null)
        {
            <form  @onsubmit="submitEdit">
                <input type="hidden" @bind="@customerToEdit.id" />


                <div class="row">
                    <div class="col-6">
                        <HxInputText Label="First name" @bind-Value="@customerToEdit.first_name" />
                    </div>
                    <div class="col-6">
                        <HxInputText Label="Last name" @bind-Value="@customerToEdit.last_name" />
                    </div>
                </div>

                <HxSubmit Text="Submit" Size="ButtonSize.Regular" Color="ThemeColor.Primary" />
            </form>
        }
    }


}

@inject ICustomerService customerService;
@inject NavigationManager nav;
@code {
    private CustomerRoot response = new();

    private bool editButton { get; set; } = false;

    private Customer? customerToEdit = new();

    public Customer? selected_customer { get; set; } = new();

    private string past_id { get; set; } = String.Empty;

    private bool registerCustomer { get; set; } = false;

    private HxGrid<Customer> customerGrid;

    protected override async Task OnInitializedAsync()
    {
        var result = await customerService.GetAllCustomersRequest();

        if (result is not null)
        {
            response = result;
        }
    }

    private async Task<GridDataProviderResult<Customer>> GetCustomerGrid(GridDataProviderRequest<Customer> request)
    {
        return new GridDataProviderResult<Customer>()
            {
                Data = response.customers.ToList(),
                TotalCount = response.customers.Count()
            };
    }

    private void isPressed(string customerId)
    {
        var cust = response.customers.Where(c => c.id == customerId).SingleOrDefault();

        if (!editButton)
        {
            past_id = customerId;
            editButton = true;
            customerToEdit = cust;
        }
        else if (editButton && customerId != past_id)
        {
            customerToEdit = cust;
            past_id = customerId;
        }
        else
        {
            customerToEdit = null;
            editButton = false;
        }
    }

    private void clearIsPressed()
    {
        customerToEdit = null;
        editButton = false;
    }

    private async Task submitEdit()
    {
        editButton = false;
        if(customerToEdit is not null)
        {
            var response = await Http.PutAsJsonAsync<Customer>($"https://localhost:7188/api/Customer/{customerToEdit.id}", customerToEdit);
        }

    }

    public void setRegisterCustomer()
    {
        registerCustomer = !registerCustomer;
    }

    private async void handleDeleteClick(Customer selected_customer)
    {
        if(selected_customer is not null)
        {
            var httpResponseMessage = await customerService.DeleteCustomerRequest(selected_customer.id);
            if (httpResponseMessage.IsSuccessStatusCode)
            {
                response.customers.Remove(selected_customer);

               await customerGrid.RefreshDataAsync();
            }
        }
    }


}
